function varargout = embossingFilterOrnek(varargin)
% EMBOSSINGFILTERORNEK MATLAB code for embossingFilterOrnek.fig
%      EMBOSSINGFILTERORNEK, by itself, creates a new EMBOSSINGFILTERORNEK or raises the existing
%      singleton*.
%
%      H = EMBOSSINGFILTERORNEK returns the handle to a new EMBOSSINGFILTERORNEK or the handle to
%      the existing singleton*.
%
%      EMBOSSINGFILTERORNEK('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in EMBOSSINGFILTERORNEK.M with the given input arguments.
%
%      EMBOSSINGFILTERORNEK('Property','Value',...) creates a new EMBOSSINGFILTERORNEK or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before embossingFilterOrnek_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to embossingFilterOrnek_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help embossingFilterOrnek

% Last Modified by GUIDE v2.5 17-Apr-2021 13:21:10

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @embossingFilterOrnek_OpeningFcn, ...
                   'gui_OutputFcn',  @embossingFilterOrnek_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before embossingFilterOrnek is made visible.
function embossingFilterOrnek_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to embossingFilterOrnek (see VARARGIN)

% Choose default command line output for embossingFilterOrnek

%yeni bir handle üret ve görselin colordatasını al.
handles.pich=imagesc(handles.picaxis);%imagesc???
handles.origPic=get(handles.pich,'CData');

axis(handles.picaxis,'off');
set(handles.picaxis,'ydir','reverse');
colormap(handles.picaxis,'gray');
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes embossingFilterOrnek wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = embossingFilterOrnek_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in b11.
function b11_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b12.
function b12_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b13.
function b13_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b21.
function b21_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b22.
function b22_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b23.
function b23_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b31.
function b31_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b32.
function b32_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

% --- Executes on button press in b33.
function b33_Callback(hObject, eventdata, handles)
update_filter_button(hObject, eventdata, handles);

function update_filter_button(hObject, eventdata, handles)
currVal=sscanf(get(hObject,'String'),'%g');
newVal=currVal+1+(-3*(currVal+1>1));
set(hObject,'String',num2str(newVal));

buttoncolors=[1 0 0; .94 .94 .94; 0 1 0];
newColor=buttoncolors(newVal+2,:);
set(hObject,'backgroundColor',newColor);

% --- Executes on button press in importButton.
function importButton_Callback(hObject, eventdata, handles)
[filename,filepath]=uigetfile('*.*','Image seçiniz');
newpic=imread([filepath filename]);

if numel(size(newpic))>2 %renk kanallarını tek kanala düşür
    newpic=mean(newpic,3);
end

handles.origPic=newpic;
set(handles.pich,'Cdata',newpic);

guidata(hObject,handles);

    
% --- Executes on button press in exportButon.
function exportButon_Callback(hObject, eventdata, handles)
[filename,filepath]=uiputfile('*.*','Output dosya ve klasörü');

im=get(handles.pich,'Cdata');
im=im-min(im(:));
im=im/max(im(:));

imwrite(im,[filepath filename '.png'])

% --- Executes on button press in filterbutton.
function filterbutton_Callback(hObject, eventdata, handles)
filter=zeros(3);
for i=1:3
    for j=1:3
        eval([ 'filter(i,j) = sscanf(get(handles.b' num2str(i) num2str(j) ',''String''),''%g'');' ])
    end
end

if sum( filter(:)==0 )==i*j
    set(handles.pich,'Cdata',handles.origPic)

else
   newim=conv2(handles.origPic,filter,'same');
    set(handles.pich,'Cdata',newim); 
end
